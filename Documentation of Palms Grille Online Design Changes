--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
A change in the detail table: adding a field called group_name. (2/24)

When the appcode reads this value, it will know whether to display a checkbox or
an exlusive radio (aka option) button. 
	
	This is needed becacuse some details that are selected for each food are 
exclusive. For example, there are multiple detail records for a bagel that all 
are different types of bagel buns. The user should be limited to only being able
to selecting one of the many bagel buns. So, all of the bagel buns will have a 
group_name value that is not null, and the bagel records will have the same 
group_name value. If the value is null, the webapp places a checkbox for the
detail. If the value is not null, the webapp puts out a radio button instead, 
and the GroupName attribute of the radio button is assigned the value that is
stored in the detail record's group_name value. The group_name field in the 
detail record along with the webapp's if statements is enough to always display
checkboxes when we want checkboxes and option buttons when we want option buttons,
grouping them with the other option buttons they way they should be. For this 
simple solution for the checkbox/radio button problem, its important that the 
string value of group_name does not start with a number.
	There is another problem that having the group_name field in the details 
table solves. The problem is that one details may be "Pickles", while another 
detail may be "Extra Pickles". The detail "Pickles" is meant to be set out as a 
checkbox IF the detail "extra pickles" does not exist. If the "Extra Pickles" 
detail exists also, the appcode will need to place both "pickles" and 
"extra pickles" as radio buttons grouped together. when the webapp's code sees 
"pickles", the group_name will be null. But when the webapp sees the 
"extra pickles", it will see group_name has a value (therefore it knows its to 
be placed as an option button). 
	When the code sees that the group_name string value starts with a number, it
knows that the number is the primary key of another detail that the current 
detail will be grouped with as radio buttons, even if that referrenced detail 
was originally supposed to be placed as a checkbox. The remaining part of 
group_name value (the part that isn't a number) will be the group name for the 
radio button. In this example, the "pickles" detail has a primary key of 2 and 
group_name of null. The "Extra Pickles" group_name is "2pic", meaning it neads 
to be radio buttons with the detail with the PK of 2 (pickles) and the group 
name atrribute of both radio buttons will be "pic".

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
A change in the food table: adding a field called bbgroup (2/24)

(aka Bump Board Group)

The food prep employees use the Bump Boards to view the food in the queue, but 
the food will need to be organized in specific groups, because thats how the 
current Bump Boards of Palm's Grille do it. We will just store the group names 
for every food so the appcode can organize food by the bbgoup value.
